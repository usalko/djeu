// Plugin for pack react component as jquery plugin,
// it generate wrapper around react component.
class ReactComponentToJQueryPlugin {
    static defaultOptions = {
        componentName: 'App',
        jqueryPluginName: 'reactApp',
        inputFile: 'index.tsx',
        outputFile: 'jquery-reactapp.js',
    };

    constructor(options = {}) {
        this.options = { ...ReactComponentToJQueryPlugin.defaultOptions, ...options };
    }

    // Define `apply` as its prototype method which is supplied with compiler as its argument
    apply(compiler) {

        const pluginName = ReactComponentToJQueryPlugin.name;

        // webpack module instance can be accessed from the compiler object,
        // this ensures that correct version of the module is used
        // (do not require/import the webpack or any symbols from it directly).
        const { webpack } = compiler;

        // Compilation object gives us reference to some useful constants.
        const { Compilation } = webpack;

        // RawSource is one of the "sources" classes that should be used
        // to represent asset sources in compilation.
        const { RawSource } = webpack.sources;

        // compiler.hooks.entryOption.tap(
        //     pluginName,
        //     (context, entry) => {
        //         console.log('OK');
        //         // EntryOptionPlugin.applyEntryOption(compiler, context, entry);

        //         return true;
        //     }
        // );

        // Specify the event hook to attach to
        compiler.hooks.thisCompilation.tap(
            pluginName,
            (compilation) => {

                const inputFile = this.options.inputFile;

                const content = `
                if (typeof jQuery !== 'undefined') {

                    (function ($) {
                        var pluginName = "${this.options.jqueryPluginName}",
                            defaults = {
                                value: 0
                            };
                        function Plugin(element, options) {
                            this.element = element;
                            this.settings = $.extend({}, defaults, options);
                            this._defaults = defaults;
                            this._name = pluginName;
                            this.init();
                        }
                        $.extend(Plugin.prototype, {
                            init: function () {
                                this.component = React.render(
                                    <${this.options.componentName} value={this.settings.value} />,
                                    this.element
                                );
                                return this;
                            },

                            val: function (val) {
                                if (!arguments.length) {
                                    return this.component.state.counter;
                                }else{
                                    this.settings.value = val;
                                    this.init();
                                }
                            }
                        });
                    })(jQuery);
                }
                `;

                console.log('OK');
                // Adding new asset to the compilation, so it would be automatically
                // generated by the webpack in the output directory.
                compilation.emitAsset(
                    // this.options.outputFile,
                    'test.jsx',
                    new RawSource(content)
                );

                // // Tapping to the assets processing pipeline on a specific stage.
                // compilation.hooks.processAssets.tap(
                //     {
                //         name: pluginName,

                //         // Using one of the later asset processing stages to ensure
                //         // that all assets were already added to the compilation by other plugins.
                //         stage: Compilation.PROCESS_ASSETS_STAGE_SUMMARIZE,
                //     },
                //     (assets) => {
                //         const content =
                //             '# In this build:\n\n' +
                //             Object.keys(assets)
                //                 .map((filename) => `- ${filename}`)
                //                 .join('\n');

                //         // Adding new asset to the compilation, so it would be automatically
                //         // generated by the webpack in the output directory.
                //         compilation.emitAsset(
                //             'test.md',
                //             new RawSource(content)
                //         );
                //     }
                // );

                console.log('Pack React Component to JQuery plugin:');
                console.log('   componentName: ', this.options.componentName);
                console.log('   jqueryPluginName: ', this.options.jqueryPluginName);
                console.log('   inputFile: ', this.options.inputFile);
                console.log('   outputFile: ', this.options.outputFile);

            }
        );
    }
}

module.exports = { ReactComponentToJQueryPlugin };